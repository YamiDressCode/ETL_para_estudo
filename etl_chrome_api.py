# main.py - ETL UNIPIX ULTIMATE COM API + TOKENS (SSL FIX)
import os
import pandas as pd
import numpy as np
import sqlite3
from datetime import datetime
import logging
import shutil
import zipfile
import tempfile
import getpass
import time
import json
import re
import calendar
from pathlib import Path
from datetime import datetime, date, time as dtime
import urllib3
import ssl

import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# Desabilitar warnings de SSL (opcional)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# =============================================================================
# CONFIGURA√á√ïES GLOBAIS 
# =============================================================================
UNIPIX_USUARIO = "marlon.carvalho@mds.gov.br"
UNIPIX_SENHA = "Mds@2025"
DOWNLOAD_FOLDER = r"C:\Users\marlon.carvalho\Desktop\aprendizado\data\input"

# URLs da API
LOGIN_URL = "https://avia.unipix.com.br/#/login"
API_URL = "https://aws-api-sms-interna.unipix.com.br/relatorio-analitico"
DEFAULT_PAGE_SIZE = 500

# =============================================================================
# CONFIGURA√á√ïES
# =============================================================================
class Config:
    def __init__(self):
        # Pastas
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        self.input_folder = DOWNLOAD_FOLDER
        self.processed_folder = os.path.join(self.base_dir, 'data', 'processed') 
        self.error_folder = os.path.join(self.base_dir, 'data', 'error')
        self.temp_folder = os.path.join(self.base_dir, 'data', 'temp')
        
        # Criar pastas
        for folder in [self.input_folder, self.processed_folder, self.error_folder, self.temp_folder]:
            os.makedirs(folder, exist_ok=True)
        
        # Configurar logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        self.logger = logging.getLogger('ETL-API')

# =============================================================================
# LEITOR DE C√ìDIGO DA PLANILHA EXCEL (MANTIDO IGUAL)
# =============================================================================
class PlanilhaCodeReader:
    def __init__(self, config):
        self.config = config
        self.logger = config.logger
        self.caminho_planilha = r"C:\Users\marlon.carvalho\OneDrive - Minist√©rio do Desenvolvimento e Assist√™ncia Social\Documentos\Unip\cod_unipix.csv"
    
    def aguardar_planilha_pronta(self, tempo_maximo=180):
        """Aguarda a planilha ficar dispon√≠vel e est√°vel"""
        try:
            self.logger.info(f"‚è≥ Aguardando planilha ficar pronta (m√°ximo {tempo_maximo}s)...")
            
            tempo_inicio = time.time()
            ultimo_tamanho = 0
            tentativas_estavel = 0
            
            while time.time() - tempo_inicio < tempo_maximo:
                if not os.path.exists(self.caminho_planilha):
                    self.logger.info("üìÅ Planilha ainda n√£o encontrada, aguardando...")
                    time.sleep(5)
                    continue
                
                try:
                    tamanho_atual = os.path.getsize(self.caminho_planilha)
                    
                    if tamanho_atual != ultimo_tamanho:
                        self.logger.info(f"üìä Planilha detectada, tamanho: {tamanho_atual} bytes")
                        ultimo_tamanho = tamanho_atual
                        tentativas_estavel = 0
                        time.sleep(2)
                        continue
                    
                    tentativas_estavel += 1
                    if tentativas_estavel >= 3:
                        self.logger.info("‚úÖ Planilha est√°vel e pronta para leitura")
                        return True
                    
                    time.sleep(2)
                    
                except OSError as e:
                    self.logger.info(f"‚ö†Ô∏è  Arquivo ainda n√£o acess√≠vel: {e}")
                    time.sleep(3)
                    continue
            
            self.logger.error("‚ùå Timeout - Planilha n√£o ficou pronta a tempo")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao aguardar planilha: {e}")
            return False
    
    def ler_codigo_da_planilha(self):
        """L√™ o c√≥digo da c√©lula 1A da planilha CSV"""
        try:
            if not self.aguardar_planilha_pronta():
                return None
            
            self.logger.info(f"üìä Lendo planilha CSV: {self.caminho_planilha}")
            
            for tentativa in range(5):
                try:
                    try:
                        df = pd.read_csv(self.caminho_planilha, header=None, encoding='utf-8')
                    except UnicodeDecodeError:
                        try:
                            df = pd.read_csv(self.caminho_planilha, header=None, encoding='latin-1')
                        except UnicodeDecodeError:
                            df = pd.read_csv(self.caminho_planilha, header=None, encoding='cp1252')
                    
                    if df.empty:
                        self.logger.warning(f"‚ö†Ô∏è  Planilha vazia na tentativa {tentativa + 1}")
                        time.sleep(3)
                        continue
                    
                    codigo = df.iloc[0, 0] if not df.empty else None
                    
                    if pd.isna(codigo) or codigo == "" or str(codigo).strip() == "":
                        self.logger.warning(f"‚ö†Ô∏è  C√©lula A1 vazia na tentativa {tentativa + 1}")
                        time.sleep(3)
                        continue
                    
                    codigo_str = str(codigo).strip()
                    self.logger.info(f"‚úÖ C√≥digo lido da planilha: {codigo_str}")
                    
                    if self.validar_formato_codigo(codigo_str):
                        return codigo_str
                    else:
                        self.logger.warning(f"‚ö†Ô∏è  C√≥digo com formato inv√°lido: {codigo_str}")
                        time.sleep(3)
                        continue
                        
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è  Erro na tentativa {tentativa + 1}: {e}")
                    time.sleep(3)
                    continue
            
            self.logger.error("‚ùå Todas as tentativas de leitura falharam")
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao ler planilha: {e}")
            return None
    
    def validar_formato_codigo(self, codigo):
        """Valida se o c√≥digo est√° no formato correto"""
        import re
        
        padroes_validos = [
            r'^[A-Za-z0-9]{3}-[A-Za-z0-9]{3}-[A-Za-z0-9]{3}$',
            r'^[A-Za-z0-9]{6,9}$',
            r'^\d{6}$',
        ]
        
        for padrao in padroes_validos:
            if re.match(padrao, codigo):
                return True
        
        self.logger.warning(f"‚ö†Ô∏è  Formato de c√≥digo n√£o reconhecido: {codigo}")
        return False

# =============================================================================
# UTILIT√ÅRIOS PARA API
# =============================================================================
def is_jwt(texto: str) -> bool:
    """Verifica se uma string √© um JWT v√°lido"""
    if not isinstance(texto, str):
        return False
    partes = texto.split('.')
    return len(partes) == 3

def first_last_of_current_month_utc_isoz(tz_name: str = "America/Sao_Paulo"):
    """Retorna datas do m√™s atual em formato ISO UTC"""
    today = date.today()
    ano, mes = today.year, today.month
    primeiro_dia = date(ano, mes, 1)
    ultimo_dia = date(ano, mes, calendar.monthrange(ano, mes)[1])

    inicio_iso = f"{primeiro_dia.strftime('%Y-%m-%d')}T00:00:00.000Z"
    fim_iso = f"{ultimo_dia.strftime('%Y-%m-%d')}T23:59:59.000Z"
    yyyymm = f"{ano}{mes:02d}"
    
    return inicio_iso, fim_iso, yyyymm

def build_params(inicio_iso: str, fim_iso: str, page: int, size: int, **extras) -> dict:
    """Constr√≥i par√¢metros para a API"""
    base = {
        "page": page,
        "size": size,
        "campanha": "",
        "produto": "",
        "mensagem": "",
        "smsClienteId": "",
        "via": "",
        "cliente": "",
        "centroCusto": "",
        "usuario": "",
        "higienizacao": "",
        "status": "",
        "tarifado": "",
        "contato": "",
        "dataFinalEnvio": fim_iso,
        "dataInicialEnvio": inicio_iso,
        "dataFinalAgendamento": "",
        "dataInicialAgendamento": "",
        "dataFinalStatus": "",
        "dataInicialStatus": ""
    }
    base.update({k: v for k, v in extras.items() if v is not None})
    return base

def cookies_selenium_para_requests(cookies_selenium, target_domain: str):
    """Converte cookies do Selenium para formato do requests"""
    jar = requests.cookies.RequestsCookieJar()
    base_domain = ".unipix.com.br"
    for c in cookies_selenium:
        name = c.get("name")
        value = c.get("value")
        domain = c.get("domain") or base_domain
        if domain.startswith("avia.") or domain == "unipix.com.br":
            domain = base_domain
        path = c.get("path") or "/"
        jar.set(name, value, domain=domain, path=path)
    return jar

# =============================================================================
# UNIPIX SCRAPER COM API - VERS√ÉO ALTERNATIVA (SSL FIXED)
# =============================================================================
class UnipixScraperAPI:
    def __init__(self, config, download_folder):
        self.config = config
        self.download_folder = download_folder
        self.driver = None
        self.wait = None
        self.logger = config.logger
        self.planilha_reader = PlanilhaCodeReader(config)
        self.token = None
        self.cookies = None
    
    def configurar_chrome(self, headless=False):
        """Configura o Chrome para autentica√ß√£o"""
        chrome_options = Options()
        
        if headless:
            chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1920,1080")
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.wait = WebDriverWait(self.driver, 30)
        self.logger.info("‚úÖ Navegador Chrome configurado")
    
    def coletar_credenciais_usuario(self):
        """Coleta credenciais e per√≠odo do usu√°rio"""
        print("\n" + "="*70)
        print("üè¢ UNIPIX - CONFIGURA√á√ÉO AUTOM√ÅTICA (API VERSION)")
        print("="*70)
        
        credenciais = {}
        
        # USA CREDENCIAIS PR√â-DEFINIDAS
        credenciais['usuario'] = UNIPIX_USUARIO
        credenciais['senha'] = UNIPIX_SENHA
        
        print(f"üë§ Usu√°rio: {credenciais['usuario']}")
        print("üîí Senha: **********")
        
        # PER√çODO DO RELAT√ìRIO
        print("\nüìÖ PER√çODO DO RELAT√ìRIO ANAL√çTICO")
        print("üí° Formato: DD/MM/AAAA - DD/MM/AAAA")
        periodo = input("üìÖ Digite o per√≠odo (ex: 03/10/2024 - 17/10/2024): ").strip()
        
        if not periodo or ' - ' not in periodo:
            print("‚ùå Per√≠odo no formato inv√°lido! Use: DD/MM/AAAA - DD/MM/AAAA")
            return None
        
        credenciais['periodo'] = periodo
        
        return credenciais
    
    def fazer_login_unipix(self, usuario, senha):
        """Faz login no site da Unipix e extrai token/cookies"""
        try:
            self.logger.info("üîê Fazendo login na Unipix via API...")
            print("üîê Realizando login...")
            
            # Configura navegador
            self.configurar_chrome(headless=False)
            
            # Acessa a p√°gina de login
            self.driver.get(LOGIN_URL)
            time.sleep(5)
            
            # Aguarda a p√°gina carregar
            self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
            
            # Preenche usu√°rio
            seletores_usuario = [
                "//input[@name='username']",
                "//input[@id='username']",
                "//input[@placeholder='Usu√°rio']",
                "//input[@type='text']",
                "//input[@type='email']"
            ]
            
            campo_usuario = None
            for seletor in seletores_usuario:
                try:
                    campo_usuario = self.driver.find_element(By.XPATH, seletor)
                    break
                except:
                    continue
            
            if not campo_usuario:
                self.logger.error("‚ùå Campo de usu√°rio n√£o encontrado")
                return False
            
            campo_usuario.clear()
            campo_usuario.send_keys(usuario)
            self.logger.info("‚úÖ Usu√°rio preenchido")
            
            # Preenche senha
            seletores_senha = [
                "//input[@name='password']",
                "//input[@id='password']", 
                "//input[@placeholder='Senha']",
                "//input[@type='password']"
            ]
            
            campo_senha = None
            for seletor in seletores_senha:
                try:
                    campo_senha = self.driver.find_element(By.XPATH, seletor)
                    break
                except:
                    continue
            
            if not campo_senha:
                self.logger.error("‚ùå Campo de senha n√£o encontrado")
                return False
            
            campo_senha.clear()
            campo_senha.send_keys(senha)
            self.logger.info("‚úÖ Senha preenchida")
            
            # Clica no bot√£o de login
            seletores_botao = [
                "//button[@type='submit']",
                "//button[contains(text(), 'Login')]",
                "//button[contains(text(), 'Entrar')]",
                "//input[@type='submit']"
            ]
            
            botao_login = None
            for seletor in seletores_botao:
                try:
                    botao_login = self.driver.find_element(By.XPATH, seletor)
                    break
                except:
                    continue
            
            if not botao_login:
                self.logger.error("‚ùå Bot√£o de login n√£o encontrado")
                return False
            
            botao_login.click()
            self.logger.info("‚úÖ Bot√£o de login clicado")
            
            # Aguarda o processamento do login
            time.sleep(5)
            
            # Verifica se precisa de autentica√ß√£o de dois fatores
            if self._verificar_se_precisa_2fa():
                return self._processar_autenticacao_2fa_automatica()
            else:
                # Login sem 2FA
                time.sleep(5)
                if self._verificar_login_sucesso():
                    return self._extrair_token_cookies()
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro no login: {e}")
            print(f"‚ùå Erro no login: {e}")
            return False
    
    def _verificar_se_precisa_2fa(self):
        """Verifica se a p√°gina pede autentica√ß√£o de dois fatores"""
        try:
            indicadores_2fa = [
                "//*[contains(text(), 'dois fatores')]",
                "//*[contains(text(), '2FA')]",
                "//*[contains(text(), 'autentica√ß√£o')]",
                "//*[contains(text(), 'c√≥digo')]",
                "//input[@name='code']",
                "//input[@placeholder='C√≥digo']",
                "//input[@type='number']"
            ]
            
            for indicador in indicadores_2fa:
                try:
                    elemento = self.driver.find_element(By.XPATH, indicador)
                    if elemento.is_displayed():
                        self.logger.info("üîê Autentica√ß√£o de dois fatores detectada")
                        print("üîê Autentica√ß√£o de dois fatores necess√°ria")
                        return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar 2FA: {e}")
            return False
    
    def _processar_autenticacao_2fa_automatica(self):
        """Processa autentica√ß√£o 2FA usando c√≥digo da planilha"""
        try:
            print("\nüì± AUTENTICA√á√ÉO VIA PLANILHA EXCEL")
            print("="*50)
            print("‚è≥ Aguardando planilha ser atualizada...")
            
            time.sleep(60)
            
            # Obt√©m c√≥digo da planilha
            codigo_2fa = self.obter_codigo_verificacao()
            
            if not codigo_2fa:
                print("‚ùå N√£o foi poss√≠vel obter c√≥digo da planilha")
                return self._processar_autenticacao_2fa_manual()
            
            print(f"‚úÖ C√≥digo obtido da planilha: {codigo_2fa}")
            
            # Preenche o c√≥digo no site
            return self._preencher_codigo_2fa_no_site(codigo_2fa)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na autentica√ß√£o autom√°tica: {e}")
            return self._processar_autenticacao_2fa_manual()
    
    def obter_codigo_verificacao(self, tempo_espera=60):
        """Obt√©m o c√≥digo de verifica√ß√£o da planilha"""
        try:
            self.logger.info("üìä Obtendo c√≥digo da planilha...")
            print(f"‚è≥ Aguardando {tempo_espera} segundos para planilha atualizar...")
            
            for i in range(tempo_espera // 10, 0, -1):
                print(f"   üïí {i * 10} segundos restantes...")
                time.sleep(10)
            
            self.logger.info("‚úÖ Finalizou espera, lendo planilha...")
            
            codigo = self.planilha_reader.ler_codigo_da_planilha()
            
            if codigo and self.planilha_reader.validar_formato_codigo(codigo):
                self.logger.info(f"‚úÖ C√≥digo validado: {codigo}")
                return codigo
            else:
                self.logger.error("‚ùå C√≥digo inv√°lido ou n√£o encontrado na planilha")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao obter c√≥digo da planilha: {e}")
            return None
    
    def _preencher_codigo_2fa_no_site(self, codigo_2fa):
        """Preenche o c√≥digo 2FA no site"""
        try:
            # Procura pelo campo do c√≥digo 2FA
            seletores_codigo = [
                "//input[@name='code']",
                "//input[@placeholder='C√≥digo']", 
                "//input[@type='number']",
                "//input[contains(@id, 'code')]",
                "//input[contains(@name, 'token')]",
                "//input[@type='text']"
            ]
            
            campo_codigo = None
            for seletor in seletores_codigo:
                try:
                    campo_codigo = self.driver.find_element(By.XPATH, seletor)
                    break
                except:
                    continue
            
            if not campo_codigo:
                print("‚ùå Campo do c√≥digo de autentica√ß√£o n√£o encontrado")
                return False
            
            # Preenche o c√≥digo
            campo_codigo.clear()
            campo_codigo.send_keys(codigo_2fa)
            self.logger.info("‚úÖ C√≥digo 2FA preenchido")
            
            # Procura e clica no bot√£o de verifica√ß√£o
            seletores_verificar = [
                "//button[contains(text(), 'Verificar')]",
                "//button[contains(text(), 'Confirmar')]",
                "//button[@type='submit']",
                "//button[contains(text(), 'Enviar')]"
            ]
            
            botao_verificar = None
            for seletor in seletores_verificar:
                try:
                    botao_verificar = self.driver.find_element(By.XPATH, seletor)
                    botao_verificar.click()
                    break
                except:
                    continue
            
            if not botao_verificar:
                print("‚ùå Bot√£o de verifica√ß√£o n√£o encontrado")
                return False
            
            self.logger.info("‚úÖ Bot√£o de verifica√ß√£o clicado")
            print("‚è≥ Verificando c√≥digo...")
            
            # Aguarda a verifica√ß√£o
            time.sleep(8)
            
            if self._verificar_login_sucesso():
                return self._extrair_token_cookies()
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao preencher c√≥digo: {e}")
            return False
    
    def _processar_autenticacao_2fa_manual(self):
        """Fallback para autentica√ß√£o manual"""
        try:
            print("\nüî¢ AUTENTICA√á√ÉO MANUAL")
            codigo_2fa = input("üî¢ Digite o c√≥digo de autentica√ß√£o de dois fatores: ").strip()
            
            if not codigo_2fa:
                print("‚ùå C√≥digo de autentica√ß√£o √© obrigat√≥rio!")
                return False
            
            return self._preencher_codigo_2fa_no_site(codigo_2fa)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na autentica√ß√£o manual: {e}")
            return False
    
    def _verificar_login_sucesso(self):
        """Verifica se o login foi bem-sucedido"""
        try:
            current_url = self.driver.current_url.lower()
            
            if "login" in current_url or "auth" in current_url:
                self.logger.error("‚ùå Login falhou - ainda na p√°gina de autentica√ß√£o")
                print("‚ùå Login falhou! Verifique suas credenciais.")
                return False
            else:
                self.logger.info("‚úÖ Login realizado com sucesso")
                print("‚úÖ Login realizado com sucesso!")
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar login: {e}")
            return False
    
    def _extrair_token_cookies(self):
        """Extrai token JWT e cookies ap√≥s login bem-sucedido"""
        try:
            self.logger.info("üîç Extraindo token e cookies...")
            
            # Extrai token do localStorage
            entries = self.driver.execute_script("return Object.entries(window.localStorage);")
            token = None
            
            for k, v in entries:
                if isinstance(v, str) and is_jwt(v):
                    token = v
                    break
                try:
                    obj = json.loads(v)
                    for cand in ["token", "access_token", "jwt", "auth", "authorization"]:
                        if isinstance(obj, dict) and cand in obj and is_jwt(str(obj[cand])):
                            token = str(obj[cand])
                            break
                    if token:
                        break
                except Exception:
                    pass
            
            # Se n√£o encontrou no localStorage, tenta sessionStorage
            if not token:
                entries_s = self.driver.execute_script("return Object.entries(window.sessionStorage);")
                for k, v in entries_s:
                    if isinstance(v, str) and is_jwt(v):
                        token = v
                        break
                    try:
                        obj = json.loads(v)
                        for cand in ["token", "access_token", "jwt", "auth", "authorization"]:
                            if isinstance(obj, dict) and cand in obj and is_jwt(str(obj[cand])):
                                token = str(obj[cand])
                                break
                        if token:
                            break
                    except Exception:
                        pass
            
            # Extrai cookies
            cookies = self.driver.get_cookies()
            
            if token:
                self.token = token
                self.logger.info("‚úÖ Token JWT extra√≠do com sucesso")
            else:
                self.logger.warning("‚ö†Ô∏è  Token JWT n√£o encontrado, usando apenas cookies")
            
            if cookies:
                self.cookies = cookies
                self.logger.info(f"‚úÖ {len(cookies)} cookies extra√≠dos")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao extrair token/cookies: {e}")
            return False
    
    def converter_periodo_para_iso(self, periodo):
        """Converte per√≠odo no formato DD/MM/AAAA - DD/MM/AAAA para ISO UTC"""
        try:
            partes = periodo.split(' - ')
            if len(partes) != 2:
                raise ValueError("Formato de per√≠odo inv√°lido")
            
            data_inicio = partes[0].strip()
            data_fim = partes[1].strip()
            
            # Converte DD/MM/AAAA para AAAA-MM-DD
            dia_i, mes_i, ano_i = data_inicio.split('/')
            dia_f, mes_f, ano_f = data_fim.split('/')
            
            inicio_iso = f"{ano_i}-{mes_i}-{dia_i}T00:00:00.000Z"
            fim_iso = f"{ano_f}-{mes_f}-{dia_f}T23:59:59.000Z"
            
            return inicio_iso, fim_iso
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao converter per√≠odo: {e}")
            return None, None
    
    def baixar_relatorio_via_api(self, periodo):
        """Baixa relat√≥rio anal√≠tico via API usando token/cookies - COM SSL FIX"""
        try:
            self.logger.info("üìä Iniciando download via API...")
            print("üìä Baixando relat√≥rio via API...")
            
            # Converte per√≠odo para formato ISO
            inicio_iso, fim_iso = self.converter_periodo_para_iso(periodo)
            if not inicio_iso or not fim_iso:
                return None
            
            # Prepara sess√£o requests COM SSL VERIFY FALSE
            sess = requests.Session()
            
            # üîß SOLU√á√ÉO SSL: Desativa verifica√ß√£o de certificado
            sess.verify = False
            
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "Accept": "application/json, text/plain, */*",
                "Origin": "https://avia.unipix.com.br",
                "Referer": "https://avia.unipix.com.br/"
            }
            
            if self.token:
                headers["Authorization"] = f"Bearer {self.token}"
                self.logger.info("üîë Usando token JWT para autentica√ß√£o")
            else:
                self.logger.info("üç™ Usando cookies para autentica√ß√£o")
            
            if self.cookies:
                jar = cookies_selenium_para_requests(self.cookies, 
                                                   target_domain="aws-api-sms-interna.unipix.com.br")
                sess.cookies = jar
            
            # Faz chamadas paginadas para a API
            all_rows = []
            page = 0
            max_pages = 50  # Limite de seguran√ßa
            
            while page < max_pages:
                params = build_params(inicio_iso, fim_iso, page=page, size=DEFAULT_PAGE_SIZE)
                
                self.logger.info(f"üìÑ Buscando p√°gina {page + 1}...")
                
                try:
                    # üîß SOLU√á√ÉO SSL: verify=False na requisi√ß√£o tamb√©m
                    resp = sess.get(API_URL, headers=headers, params=params, timeout=180, verify=False)
                    
                    if resp.status_code == 401:
                        self.logger.error("‚ùå 401 N√£o autorizado na API. Token/cookies inv√°lidos.")
                        break
                    if resp.status_code >= 400:
                        self.logger.error(f"‚ùå Falha na API ({resp.status_code}): {resp.text[:300]}")
                        break
                    
                    # Processa resposta
                    ctype = resp.headers.get("Content-Type", "")
                    if "application/json" in ctype:
                        data = resp.json()
                        
                        if isinstance(data, dict) and "content" in data:
                            rows = data["content"] or []
                            all_rows.extend(rows)
                            
                            self.logger.info(f"üìä P√°gina {page + 1}: {len(rows)} registros")
                            
                            # Verifica se √© a √∫ltima p√°gina
                            last_flag = data.get("last")
                            total_pages = data.get("totalPages")
                            total_elements = data.get("totalElements")
                            
                            if total_elements:
                                self.logger.info(f"üìà Total de registros: {total_elements}")
                            
                            if last_flag is True:
                                self.logger.info("‚úÖ √öltima p√°gina alcan√ßada")
                                break
                            if total_pages is not None and page + 1 >= int(total_pages):
                                self.logger.info("‚úÖ Todas as p√°ginas processadas")
                                break
                            if len(rows) < DEFAULT_PAGE_SIZE:
                                self.logger.info("‚úÖ Fim dos dados (p√°gina incompleta)")
                                break
                        else:
                            # Outros formatos de resposta
                            rows = data.get("items") or data.get("rows") or []
                            all_rows.extend(rows)
                            self.logger.info(f"üìä Formato alternativo: {len(rows)} registros")
                            if len(rows) < DEFAULT_PAGE_SIZE:
                                break
                    else:
                        # Se n√£o for JSON, trata como CSV
                        self.logger.info("üìÑ Resposta em formato CSV detectada")
                        df = pd.read_csv(pd.compat.StringIO(resp.text))
                        all_rows = df.to_dict('records')
                        break
                    
                    page += 1
                    
                except requests.exceptions.SSLError as ssl_error:
                    self.logger.error(f"‚ùå Erro SSL (mesmo com verify=False): {ssl_error}")
                    break
                except requests.exceptions.RequestException as req_error:
                    self.logger.error(f"‚ùå Erro de requisi√ß√£o: {req_error}")
                    break
            
            # Converte para DataFrame
            if all_rows:
                df = pd.json_normalize(all_rows)
                self.logger.info(f"‚úÖ Dados obtidos: {len(df)} registros no total")
                
                # Salva arquivo
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                nome_arquivo = f"unipix_relatorio_{timestamp}.csv"
                caminho_arquivo = os.path.join(self.download_folder, nome_arquivo)
                
                df.to_csv(caminho_arquivo, index=False, encoding="utf-8-sig")
                self.logger.info(f"üíæ Arquivo salvo: {caminho_arquivo}")
                
                return caminho_arquivo
            else:
                self.logger.warning("‚ö†Ô∏è  Nenhum dado retornado pela API")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao baixar relat√≥rio via API: {e}")
            return None
    
    def executar_rotina_completa(self):
        """Executa toda a rotina da Unipix usando API"""
        try:
            print("\n" + "="*70)
            print("üöÄ INICIANDO ROTINA UNIPIX - VERS√ÉO API (SSL FIX)")
            print("="*70)
            print("üîë Usando credenciais pr√©-definidas...")
            print(f"üë§ Usu√°rio: {UNIPIX_USUARIO}")
            print("üîí Senha: **********")
            print("üìÅ Download para: " + DOWNLOAD_FOLDER)
            print("üí° Informe apenas o per√≠odo quando solicitado")
            print("üîß SSL: Verifica√ß√£o desativada para resolver problema de certificado")
            
            # 1. Coletar credenciais (autom√°tico, s√≥ pede per√≠odo)
            credenciais = self.coletar_credenciais_usuario()
            if not credenciais:
                return 0
            
            # 2. Fazer login e extrair token/cookies
            if not self.fazer_login_unipix(credenciais['usuario'], credenciais['senha']):
                return 0
            
            # 3. Baixar relat√≥rio via API
            arquivo_baixado = self.baixar_relatorio_via_api(credenciais['periodo'])
            
            if arquivo_baixado:
                print(f"\nüéâ ROTINA CONCLU√çDA COM SUCESSO!")
                print(f"üìÅ Arquivo salvo em: {arquivo_baixado}")
                return 1
            else:
                print("\n‚ùå Falha no download do relat√≥rio")
                return 0
                
        except Exception as e:
            self.logger.error(f"üí• Erro na rotina completa: {e}")
            print(f"üí• Erro na rotina: {e}")
            return 0
        finally:
            # Fecha o navegador
            if self.driver:
                self.driver.quit()
                self.logger.info("‚úÖ Navegador fechado")

# =============================================================================
# FUN√á√ÉO PRINCIPAL
# =============================================================================
def main():
    try:
        config = Config()
        
        while True:
            print("\n" + "="*70)
            print("üöÄ UNIPIX ETL - VERS√ÉO API (SSL FIX)")
            print("="*70)
            print("1 - üè¢ Web Scraping UniPix (API + Tokens + SSL Fix)")
            print("2 - üö™ Sair")
            print("="*70)
            print("üí° Nova abordagem: Login via Selenium + Dados via API")
            print("üîß SSL: Problema de certificado resolvido")
            
            opcao = input("\nüìã Digite sua op√ß√£o (1-2): ").strip()
            
            if opcao == "1":
                scraper = UnipixScraperAPI(config, config.input_folder)
                resultado = scraper.executar_rotina_completa()
                
                if resultado > 0:
                    input(f"\n‚èé {resultado} arquivo(s) baixado(s). Enter para continuar...")
                else:
                    input("\n‚èé Nenhum arquivo baixado. Enter para continuar...")
                    
            elif opcao == "2":
                print("\nüëã Saindo do sistema...")
                break
            else:
                print("\n‚ùå Op√ß√£o inv√°lida!")
                input("\n‚èé Pressione Enter para continuar...")
        
    except Exception as e:
        print(f"üí• ERRO CR√çTICO: {e}")

if __name__ == "__main__":
    main()